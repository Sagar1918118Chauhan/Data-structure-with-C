#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node* left;
    struct node* right;
};

void preorder(struct node* root);
struct node* createNode(int data);
void Inorder(struct node* root) ;
void Postorder(struct node* root);

int main() {
    struct node* p = createNode(10);
    struct node* p1 = createNode(7);
    struct node* p2 = createNode(11);
    struct node* p3 = createNode(4);
    struct node* p4 = createNode(8);
    /*
                   10
                  / \
                 7   11
                /\
               4   8
    */
   
    p->left = p1;
    p->right = p2;
    p1->left = p3;
    p1->right = p4;
    printf("Inorder traversal");
     Inorder(p); 
     printf("\n");
    printf("Preorder traversal: ");
    preorder(p);
    printf("\n");
    
     printf("Postorder traversal");
    Postorder(p);
    printf("\n");

    return 0;
}

struct node* createNode(int data) {
    struct node* n = (struct node*)malloc(sizeof(struct node));
    n->data = data;
    n->left = NULL;
    n->right = NULL;
    return n;
}

void preorder(struct node* root) {
    if (root != NULL) {
        printf("%d ", root->data);
        preorder(root->left);
        preorder(root->right);
    }
}

 void Inorder(struct node* root) {
    if (root != NULL) {
         Inorder(root->left);
        printf("%d ", root->data);
         Inorder(root->right);
    }
}
void Postorder(struct node* root) {
    if (root != NULL) {
         Postorder(root->left);
       
         Postorder(root->right);
          printf("%d ", root->data);
    }
}
  
  
  OUTPUT:
     
Inorder traversal4 7 8 10 11 
Preorder traversal: 10 7 4 8 11 
Postorder traversal4 8 7 11 10 
